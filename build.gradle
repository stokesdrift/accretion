
// Apply plugins
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'application'

configurations {
  compile {
    transitive = true
  }

  runtime {
    extendsFrom compile
  }
}

dependencies {
  compile "org.jruby:jruby-complete:1.7.19"
  compile 'javax.enterprise:cdi-api:1.1'
  compile "org.yaml:snakeyaml:1.15"
  compile "org.jboss.weld.se:weld-se-core:2.2.9.Final"

  testCompile 'org.powermock:powermock-mockito-release-full:1.6.1'
  testCompile 'junit:junit:4.11'

}

buildscript {
  repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }
}

loadProperties("${System.getProperty('user.home')}/gradle.properties")

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
  mavenLocal()
  maven { url 'http://deux.gemjars.org' }
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}


sourceSets {
  main {
    resources.srcDirs = ['src/main/resources']
  }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

// test.doFirst {
//    copy {
//        from 'build/resources/main/META-INF/beans.xml'
//        into 'build/classes/main/META-INF/'
//    }
//    copy {
//        from 'build/resources/test/META-INF/beans.xml'
//        into 'build/classes/test/META-INF/'
//    }
// }

signing {
    sign configurations.archives
}

eclipse {
  classpath {
    defaultOutputDir = file('build/classes')
  }
}

def loadProperties(String sourceFileName) {
  def config = new Properties()
  def propFile = new File(sourceFileName)
  if (propFile.canRead()) {
    config.load(new FileInputStream(propFile))
    for (Map.Entry property in config) {
      project.ext[property.key] = property.value;
    }
  }
}

// task cleanLibs << {
// new File('lib').delete()
// }

import org.apache.tools.ant.filters.*

// task copyRequireFile(type: Copy) {
//  destinationDir = new File('lib')
//  from "src/main/ruby"
//  include 'stokesdrift.rb'
// filter(ConcatFilter, prepend: file('src/include/header.txt'))
// }

// task copyDependsLibs(type: Copy) {
//  destinationDir = new File('lib')
//  from "build/libs"
//  from configurations.runtime
//  from "src/main/ruby"
// }

uploadArchives {
  repositories {
    mavenDeployer {

      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Stokes Drift Accretion'
        packaging 'jar'
        description 'Library for managing ruby runtimes'
        url 'http://www.stokesdrift.com'
        scm {
          connection 'scm:git:git@github.com:stokesdrift/accretion.git'
          developerConnection 'scm:git:git@github.com:stokesdrift/accretion.git'
          url 'git@github.com:stokesdrift/accretion.git'
        }

        licenses {
          license {
            name 'MIT License'
            url 'http://www.opensource.org/licenses/mit-license.php'
          }
        }

        developers {
          developer {
            id 'driedtoast'
            name 'Daniel Marchant'
            email 'driedtoast@gmail.com'
          }
        }
      }
    }
  }
}